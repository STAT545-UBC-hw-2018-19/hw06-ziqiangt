summary(cars)
plot(pressure)
## load gapminder
suppressPackageStartupMessages(library(gapminder))
## load tidyverse
suppressPackageStartupMessages(library(tidyverse))
## load testthat
suppressPackageStartupMessages(library(testthat))
## load stringi
suppressPackageStartupMessages(library(stringi))
## load leaflet
suppressPackageStartupMessages(library(leaflet))
install.packages("strinai")
## load gapminder
suppressPackageStartupMessages(library(gapminder))
## load tidyverse
suppressPackageStartupMessages(library(tidyverse))
## load testthat
suppressPackageStartupMessages(library(testthat))
## load stringi
suppressPackageStartupMessages(library(stringi))
## load leaflet
suppressPackageStartupMessages(library(leaflet))
install.packages("leadflet")
suppressPackageStartupMessages(library(gapminder))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(testthat))
suppressPackageStartupMessages(library(stringi))
x <- c("\"", "\\")
x
writeLines(x)
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
str_to_lower(str_sub(x, 1, 1))
paste("Task", "1", sep = "-")
paste0("Task", "1")
str_c("Task", "1", sep = "-")
str_c("Task", "1", sep = "-")
str_c("Task", "1", sep = "")
paste("NA-", NA, sep = "")
paste0("NA-", NA)
str_c("NA-", "NA", sep = "")
paste("NA ", NA, sep = "")
paste0("NA ", NA)
str_c("NA ", "NA", sep = "")
paste("Look NA", NA, sep = "")
paste0("Look NA ", NA)
str_c("Look NA ", "NA", sep = "")
paste("Look NA", NA, sep = "")
paste0("Look NA ", NA)
str_c("NA is", "NA", sep = "")
paste("Look NA", NA, sep = "")
paste0("Look NA ", NA)
str_c("NA is", "NA")
paste("Look NA", NA, sep = "")
paste0("Look NA ", NA)
str_c("NA is", NA)
paste("Look NA", NA, sep = "")
paste0("Look NA", NA)
str_c("Look NA", NA)
paste("Look ", NA, sep = "")
paste0("Look ", NA)
str_c("Look ", NA)
str_c("Look at", me, sep = " ")
str_c("Look at", "me", sep = " ")
str_c("Look at", "me", sep = " ")
str_c("Look at", "me", collapse = " ")
str_c(c("x", "y", "z"), sep = " ")
str_c(c("x", "y", "z"), collapse = ", ")
str_c(c("x", "y", "z"), sep = ":")
str_c(c("x", "y", "z"), collapse = ":")
str_c(c("x", "y", "z"), sep = ":")
str_c(c("x", "y", "z"), collapse = ":")
str_c(c("x", "y", "z"), sep = ": ")
str_c(c("x", "y", "z"), collapse = ":")
str_c(c("x", "y", "z"), c("a", "b", "c"), sep = ": ")
str_c(c("x", "y", "z"), collapse = ":")
str_c(c("x", "y", "z"), c("a", "b", "c"), sep = ": ")
str_c(c("x", "y", "z"), c("a", "b", "c"), collapse = ":")
str_odd <- "odd"
#a function to find the middle index
find_middle <- function(s) {
return(str_length(s) / 2 + 1)
}
# extract the middle character of string_odd, which is u
index_odd <- find_middle(string_odd)
str_odd <- "odd"
#a function to find the middle index
find_middle <- function(s) {
return(str_length(s) / 2 + 1)
}
# extract the middle character of string_odd, which is u
index_odd <- find_middle(str_odd)
str_sub(str_odd, index_odd, index_odd)
str_odd <- "eye"
#a function to find the middle index
find_middle <- function(s) {
return(str_length(s) / 2 + 1)
}
# extract the middle character of string_odd, which is u
index_odd <- find_middle(str_odd)
str_sub(str_odd, index_odd, index_odd)
str_odd <- "eye"
#a function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# extract the middle character of string_odd, which is u
index_odd <- find_middle(str_odd)
str_sub(str_odd, index_odd, index_odd)
str_odd <- "eye"
# A function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# Obtain the middle index and output the midelle character
index_odd <- find_middle(str_odd) %>%
str_sub(str_odd, , )
str_odd <- "eye"
# A function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# Obtain the middle index and output the midelle character
index_odd <- find_middle(str_odd) %>%
str_sub(str_odd, , index_odd)
str_odd <- "eye"
# A function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# Obtain the middle index and output the midelle character
find_middle(str_odd) %>%
str_sub(str_odd, , index_odd)
str_odd <- "eye"
# A function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# Obtain the middle index and output the midelle character
index_odd <- find_middle(str_odd) %>%
str_sub(str_odd, index_odd, index_odd)
str_odd <- "eye"
# A function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# Obtain the middle index and output the midelle character
index_odd <- find_middle(str_odd) %>%
str_sub(str_odd, index_odd, index_odd)
str_odd <- "eye"
# A function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# Obtain the middle index and output the midelle character
index_odd <- find_middle(str_odd) %>%
str_sub(str_odd, , )
str_odd <- "eye"
# A function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# Obtain the middle index and output the midelle character
index_odd <- find_middle(str_odd)
str_sub(str_odd, index_odd, index_odd)
?str_wrap()
odd_string <- "eye"
# A function to find the middle index
find_middle <- function(input) {
return(str_length(input) / 2 + 1)
}
# Obtain the middle index and output the midelle character
index_odd <- find_middle(odd_string)
str_sub(odd_string, index_odd, index_odd)
even_string <- "eye"
# A function to find the middle index
find_middle_even <- function(input) {
return(str_length(input) / 2 )
}
# Obtain the middle index and output the midelle character
even_index <- find_middle_even(even_string)
str_sub(even_string, even_index, even_index)
even_string <- "eyne"
# A function to find the middle index
find_middle_even <- function(input) {
return(str_length(input) / 2 )
}
# Obtain the middle index and output the midelle character
even_index <- find_middle_even(even_string)
str_sub(even_string, even_index, even_index)
even_string <- "eyne"
# A function to find the middle index
find_middle_even <- function(input) {
return(str_length(input) / 2 )
}
# Obtain the middle index and output the midelle character
even_index <- find_middle_even(even_string)
str_sub(even_string, even_index, even_index+1)
even_string <- "eyne"
# A function to find the middle index
find_middle_even <- function(input) {
return(str_length(input) / 2+1 )
}
# Obtain the middle index and output the midelle character
even_index <- find_middle_even(even_string)
str_sub(even_string, even_index, even_index+1)
even_string <- "eyne"
# A function to find the middle index
find_middle_even <- function(input) {
return(str_length(input) / 2 + 1 )
}
# Obtain the middle index and output the midelle character
even_index <- find_middle_even(even_string)
str_sub(even_string, even_index-1, even_index)
even_string <- "eyne"
# A function to find the middle index
find_middle_even <- function(input) {
return(str_length(input) / 2 + 1 )
}
# Obtain the middle index and output the midelle character
even_index <- find_middle_even(even_string)
str_sub(even_string, even_index-1, even_index)
paragraph <- "One or more elements are missing or sketchy. Missed opportunities to complement code and numbers with a figure and interpretation. Technical problem that is relatively easy to fix. It’s hard to find the report in this crazy repo."
cat(paragraph)
paragraph <- "One or more elements are missing or sketchy. Missed opportunities to complement code and numbers with a figure and interpretation. Technical problem that is relatively easy to fix. It’s hard to find the report in this crazy repo."
paragraph
paragraph <- "One or more elements are missing or sketchy. Missed opportunities to complement code and numbers with a figure and interpretation. Technical problem that is relatively easy to fix. It’s hard to find the report in this crazy repo."
cat(paragraph)
paragraph <- "One or more elements are missing or sketchy. Missed opportunities to complement code and numbers with a figure and interpretation. Technical problem that is relatively easy to fix. It’s hard to find the report in this crazy repo."
cat(paragraph)
cat(str_wrap(long_paragraph), sep = "\n")
paragraph <- "One or more elements are missing or sketchy. Missed opportunities to complement code and numbers with a figure and interpretation. Technical problem that is relatively easy to fix. It’s hard to find the report in this crazy repo."
cat(paragraph)
cat(str_wrap(paragraph), sep = ".")
paragraph <- "One or more elements are missing or sketchy. Missed opportunities to complement code and numbers with a figure and interpretation. Technical problem that is relatively easy to fix. It’s hard to find the report in this crazy repo."
cat(paragraph)
cat(str_wrap(paragraph), sep = "\n")
# a long sentence
paragraph <- "One or more elements are missing or sketchy. Missed opportunities to complement code and numbers with a figure and interpretation. Technical problem that is relatively easy to fix. It’s hard to find the report in this crazy repo."
# view without wrap
cat(paragraph)
# view with wrap
cat(str_wrap(paragraph), sep = "\n")
?str_trim
spaces_string = "  I am  "
# use str_trim() removes whitespace from start and end of string
no_spaces_string <- str_trim(string_with_spaces)
spaces_string = "  I am  "
# use str_trim() removes whitespace from start and end of string
no_spaces_string <- str_trim(spaces_string)
no_spaces_string
spaces_string = "  I am  "
spaces_string
# use str_trim() removes whitespace from start and end of string
no_spaces_string <- str_trim(spaces_string)
no_spaces_string
# before removing whitespace from start and end of string
spaces_string = "  I am  "
spaces_string
# After using str_trim()
no_spaces_string <- str_trim(spaces_string)
no_spaces_string
letters %>%
.[1:10] %>%
str_pad(3, "right") %>%
str_c(letters[2:11])
letters %>%
.[1:10] %>%
str_pad(3, "left") %>%
str_c(letters[2:11])
letters %>%
.[1:10] %>%
str_pad(3, "right") %>%
str_c(letters[2:11])
letters %>%
.[1:10] %>%
str_pad(4, "right") %>%
str_c(letters[2:11])
letters %>%
.[1:10] %>%
str_pad(2, "right") %>%
str_c(letters[2:11])
letters %>%
.[1:10] %>%
str_pad(width = 2, side = "right") %>%
str_c(letters[2:11])
letters
vector_to_string <- function(v) {
if(length(v)==0){
return("")
}
else(length(v)==1){
vector_to_string <- function(v) {
if (length(v) == 0){
return("")
}
else (length(v) == 1){
vector_to_string <- function(v) {
if (length(v) == 0){
return("")
}
else if (length(v) == 1){
return(v)
}
else{
front <- str_c(v[-length(v)], collapse = ", ")
whole <- str_c(front, v[length(v)], collapse = "and ")
return(whole)
}
}
#begin to test
vector_to_string(c("a", "b"))
vector_to_string <- function(v) {
if (length(v) == 0){
return("")
}
else if (length(v) == 1){
return(v)
}
else{
front <- str_c(v[-length(v)], collapse = ", ")
whole <- str_c(front, v[length(v)], collapse = "and ")
return(whole)
}
}
#begin to test
vector_to_string(c(""))
vector_to_string(c("a"))
vector_to_string(c("a", "b"))
vector_to_string(c("a", "b","c"))
vector_to_string <- function(v) {
if (length(v) == 0){
return("")
}
else if (length(v) == 1){
return(v)
}
else{
front <- str_c(v[-length(v)], collapse = ", ")
whole <- str_c(front, v[length(v)], collapse = "and")
return(whole)
}
}
#begin to test
vector_to_string(c(""))
vector_to_string(c("a"))
vector_to_string(c("a", "b"))
vector_to_string(c("a", "b","c"))
vector_to_string <- function(v) {
if (length(v) == 0){
return("")
}
else if (length(v) == 1){
return(v)
}
else{
front <- str_c(v[-length(v)], collapse = ", ")
whole <- str_c(front, v[length(v)], sep = "and")
return(whole)
}
}
#begin to test
vector_to_string(c(""))
vector_to_string(c("a"))
vector_to_string(c("a", "b"))
vector_to_string(c("a", "b","c"))
vector_to_string <- function(v) {
if (length(v) == 0){
return("")
}
else if (length(v) == 1){
return(v)
}
else{
front <- str_c(v[-length(v)], collapse = ", ")
whole <- str_c(front, v[length(v)], sep = " and ")
return(whole)
}
}
#begin to test
vector_to_string(c(""))
vector_to_string(c("a"))
vector_to_string(c("a", "b"))
vector_to_string(c("a", "b","c"))
、？
\?
"\"
1
1
1
q
quit
test_back_slash <- "I\AM"
test_back_slash <- "I\\AM"
str_view(test_back_slash, pattern = "\\\\", match = TRUE)
test_back_slash <- "I\\AM"
str_view(test_back_slash, pattern = "\\\\")
test_back_slash <- "I\\AM"
str_view(test_back_slash, pattern = "\\\\", match = TRUE)
test_back_slash <- "I\\AM"
str_view(test_back_slash, pattern = "\\\\")
test <- "I'\AM"
test <- "I'\\AM"
str_view(test, pattern = "\\'\\")
test <- "I'\\AM"
str_view(test, pattern = "\\'\\\\")
test <- "I.A.Mx.zy...xxx"
str_view(test, pattern = "\..\..\..")
test <- "I.A.Mx.zy...xxx"
str_view(test, pattern = "\\..\\..\\..")
test <- "I.A.Mx.zy...xxx"
str_view(test, pattern = "\\..\\..\\..", match = TRUE)
test <- "I.A.Mx.zy...xxx"
str_view(test, pattern = "\\..\\..\\..", match = TRUE)
test <- "I.A.M.z...xxx"
str_view(test, pattern = "\\..\\..\\..", match = TRUE)
test <- "I'\\AM"
str_view(test, pattern = "\\'\\\\", match = TRUE)
test <- "I\\AM"
str_view(test, pattern = "\\\\", match = TRUE)
